id: https://w3id.org/semsql/nlp
name: semsql_nlp
title: Semantic SQL NLP/TM module
description: >-
  Module for representing results of simple NLTK/SpaCy type processing
license: https://creativecommons.org/publicdomain/zero/1.0/

prefixes:
  semsql_nlp: https://w3id.org/semsql/nlp
  linkml: https://w3id.org/linkml/
  
default_prefix: semsql_nlp
default_range: string

default_curi_maps:
  - semweb_context

imports:
  - rdf

classes:

  subject prefix:
    description: >-
      This may move to another module as it is generally useful
    slots:
      - subject
      - value
    comments:
      - sqlview>> SELECT DISTINCT s.subject, prefix.prefix AS value FROM prefix, statements AS s WHERE INSTR(s.subject,prefix || ':')=1;

  textual transformation:
    description: >-
      Represents a transformation of a subject text value, e.g. lemmatization
    slots:
      - subject
      - predicate
      - value
    slot_usage:
      subject:
        range: string
        description: >-
          The string value prior to processing. This may be for example the value of an rdfs_label_statement
      predicate:
        description: >-
          The relation between subject and object, e.g stemming
      object:
        range: string
        description: >-
          The string value after processing. E.g. lemmatized value

  processed statement:
    slots:
      - subject
      - predicate
      - value
      - transformation predicate
      - transformed value
    description: >-
      A statement that is enhanced with a processed/transformed text value
    comments:
      - >-
        sqlview>>
          SELECT s.*, t.predicate AS transformation_predicate, t.value AS transformed_value
          FROM statements AS s JOIN textual_transformation AS t ON(s.value=t.subject)
          WHERE datatype != 'xsd:boolean'


  match:
    attributes:
      subject id:
      subject label:
      subject source:
      subject match field:
      subject preprocessing:
      object id:
      object label:
      object source:
      object match field:
      object preprocessing:
      match string:
    description: >-
      TODO: Reuse SSSOM here
    comments:
      - >-
        sqlview>>
          SELECT
           s1.subject AS subject_id,
           s1l.value AS subject_label,
           s1.predicate AS subject_match_field,
           s1p.value AS subject_source,
           s1.transformation_predicate AS subject_preprocessing,
           s2.subject AS object_id,
           s2l.value AS object_label,
           s2.predicate AS object_match_field,
           s2p.value AS object_source,
           s2.transformation_predicate AS object_preprocessing,
           s1.transformed_value AS match_field
          FROM
            processed_statement AS s1
            JOIN processed_statement AS s2 ON (s1.transformed_value = s2.transformed_value)
            JOIN rdfs_label_statement AS s1l ON (s1.subject=s1l.subject)
            JOIN rdfs_label_statement AS s2l ON (s2.subject=s2l.subject)
            JOIN subject_prefix AS s1p ON (s1.subject=s1p.subject)
            JOIN subject_prefix AS s2p ON (s2.subject=s2p.subject)
            WHERE s1.subject != s2.subject








slots:
  transformation predicate:
  transformed value: