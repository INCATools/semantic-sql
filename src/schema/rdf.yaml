id: https://w3id.org/semsql/rdf
name: Semsql-RDF
title: Semantic SQL RDF module
description: >-
  Abstractions for working with RDF and RDFS triples
license: https://creativecommons.org/publicdomain/zero/1.0/

prefixes:
  semsql_rdf: https://w3id.org/semsql/rdf
  linkml: https://w3id.org/linkml/
  sh: http://www.w3.org/ns/shacl#
  
default_prefix: semsql_rdf
default_range: string

default_curi_maps:
  - semweb_context

imports:
  - linkml:types
  - rdf

subsets:
  export:
    description: >-
      Used to indicate a table/class that should be dumped as part of the export of a db
  base table:
    description: >-
      Indicates the class/table is typically not constructed from a view

classes:
  prefix:
    description: >-
      Maps CURIEs to URIs
    slots:
      - prefix
      - base
    class_uri: sh:PrefixDeclaration
    in_subset:
      - export
      - base table

  # -- triples --
  statements:
    aliases:
      - triple
    description: >-
      Represents an RDF triple
    slots:
      - stanza
      - subject
      - predicate
      - object
      - value
      - datatype
      - language
    class_uri: rdf:Statement
    in_subset:
      - base table

  node to node statement:
    abstract: true
    is_a: statements
    description: >-
      A statement where object is non-null and value is not populated
    slot_usage:
      object:
        required: true
    comments:
      - sqlview>> SELECT * FROM statements WHERE object IS NOT NULL
      
  node to value statement:
    abstract: true
    is_a: statements
    description: >-
      A statement where value is non-null and object is not populated
    slot_usage:
      value:
        required: true
    comments:
      - sqlview>> SELECT * FROM statements WHERE value IS NOT NULL
      
      
  rdf type statement:
    is_a: node to node statement
    description: >-
      A statement that indicates the asserted type of the subject entity
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdf:type'
    slot_usage:
      object:
        description: >-
          The entity type
        range: class node

  rdfs subclass of statement:
    is_a: node to node statement
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdfs:subClassOf'
    slot_usage:
      subject:
        description: >-
          The subclass element of the triple
        range: class node
      object:
        description: >-
          The superclass element of the triple
        range: class node

  rdfs subclass of named statement:
    is_a: rdfs subclass of statement
    comments:
      - sqlview>> SELECT * FROM rdfs_subclass_of_statement WHERE object NOT LIKE '_:%';

  rdfs subproperty of statement:
    is_a: node to node statement
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdfs:subPropertyOf'
    slot_usage:
      subject:
        description: >-
          The subproperty element of the triple
        range: property node
      object:
        description: >-
          The superproperty element of the triple
        range: property node

  rdfs label statement:
    is_a: node to value statement
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdfs:label'

  rdfs domain statement:
    is_a: node to domain statement
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdfs:domain'
  rdfs range statement:
    is_a: node to domain statement
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdfs:range'

  rdf list statement:
    abstract: true
    is_a: statements
    description: >-
      A statement that is used to represent aspects of RDF lists
    slot_usage:
      subject:
        description: The rdf:List to which the statement applies
        range: rdf list node

  rdf first statement:
    is_a: rdf list statement
    description: >-
      A statement that connects a list to its first element.
      This is a low-level triple, it is unlikely you need to use this directly.
      It is used to define rdf_list_member_statement, which is more useful
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdf:first'
  rdf rest statement:
    is_a: rdf list statement
    description: >-
      A statement that connects a list to its remaining elements.
      This is a low-level triple, it is unlikely you need to use this directly.
      It is used to define rdf_list_member_statement, which is more useful
    comments:
      - sqlview>> SELECT * FROM statements WHERE predicate='rdf:rest'
  rdf rest transitive statement:
    is_a: rdf list statement
    comments:
      - >-
        sqlview>>
          WITH RECURSIVE rdf_rest_transitive_statement
                     (
                           subject, object
                     )
                     AS
                     (SELECT subject, object
                        FROM rdf_rest_statement
                       UNION ALL
                      SELECT
                           rest.subject, rest_t.object
                        FROM rdf_rest_statement AS rest
                        JOIN rdf_rest_transitive_statement AS rest_t
                          ON rest.object = rest_t.subject
                     )
                  SELECT * FROM rdf_rest_transitive_statement
  rdf list member statement:
    is_a: rdf list statement
    comments:
      - >-
        sqlview>>
          SELECT
             rest_t.subject,
             f.object
            FROM rdf_rest_transitive_statement AS rest_t JOIN rdf_first_statement AS f ON (rest_t.object = f.subject)
            UNION
            SELECT subject,object FROM rdf_first_statement;

  # -- nodes --
  node:
    slots:
      - id
    comments:
      - sqlview>> SELECT distinct(subject) AS id FROM statements UNION SELECT distinct(object) AS id FROM statements WHERE datatype IS NOT NULL
  blank node:
    is_a: node
    comments:
      - sqlview>> SELECT * FROM node WHERE id LIKE '_:%'
  rdf list node:
    is_a: blank node
    description: >-
      A node representing an RDF list
    comments:
      - sqlview>> SELECT distinct subject AS id from rdf_type_statement WHERE object = 'rdf:List';
  iri node:
    is_a: node
    comments:
      - sqlview>> SELECT * FROM node WHERE id NOT LIKE '_:%'
  class node:
    is_a: node
    mixins:
      - class trait
    class_uri: owl:Class
    comments:
      - sqlview>> SELECT distinct subject AS id from rdf_type_statement WHERE object = 'owl:Class';
  property node:
    is_a: node
    description: >-
      Note this only directly classifies nodes asserted to be rdf:Properties
    class_uri: owl:Propery
    comments:
      - sqlview>> SELECT distinct subject AS id from rdf_type_statement WHERE object = 'owl:Property';
  named individual node:
    is_a: node
    class_uri: owl:NamedIndividual
    comments:
      - sqlview>> SELECT distinct subject AS id from rdf_type_statement WHERE object = 'owl:NamedIndividual';

  # -- reporting/stats --

  rdf level summary statistic:
    abstract: true
    attributes:
      element:
        range: node
      number_of_usages:
        range: integer
    mixins:
      - is report

  count of predicates:
    is_a: rdf level summary statistic
    comments:
      - sqlview>> SELECT predicate AS element, count(*) AS number_of_usages FROM statements GROUP BY predicate ORDER BY number_of_usages DESC
  count of instantiated classes:
    is_a: rdf level summary statistic
    comments:
      - sqlview>> SELECT object AS element, count(*) AS number_of_usages FROM rdf_type_statement GROUP BY element ORDER BY number_of_usages DESC

  # -- mixins --
  node trait:
    abstract: true
    mixin: true
  class trait:
    mixin: true
    is_a: node trait
  property trait:
    mixin: true
    is_a: node trait
  individual trait:
    mixin: true
    is_a: node trait

  is report:
    mixin: true
    abstract: true

slots:
  id:
    identifier: true
    range: node id type
  subject:
    range: node
  predicate:
  object:
    description: >-
      Note the range of this slot is always a node. If the triple represents a literal, instead value will be populated
    range: node
  stanza:
    range: node
  datatype:
  value:
    description: >-
      Note the range of this slot is always a string. Only used the triple represents a literal assertion
    range: literal as string type
  language:
    range: string
    todos:
      - use an enum
  prefix:
    range: ncname
    slot_uri: sh:prefix
  base:
    range: uri
    slot_uri: sh:namespace
  description:
    slot_uri: dcterms:description

types:
  node id type:
    typeof: uriorcurie
  literal as string type:
    typeof: string
    
