name: semsql_obo
description: Abstractions for working with OBO ontologies. Assumes usage of OMO. Currently
  this module contains mostly checks/reports, similar to ROBOT report
title: Semantic SQL OBO module
id: https://w3id.org/semsql/obo
imports:
- rdf
- owl
- omo
license: https://creativecommons.org/publicdomain/zero/1.0/
prefixes:
  semsql_obo: https://w3id.org/semsql/obo
  linkml: https://w3id.org/linkml/
default_curi_maps:
- semweb_context
default_prefix: semsql_obo
default_range: string
classes:
  ontology_status_statement:
    comments:
    - sqlview>> SELECT * FROM statements WHERE predicate = '<http://obofoundry.github.io/vocabulary/activity_status>'
    - sqlview>> SELECT * FROM statements WHERE predicate = 'pav:status'
    is_a: node_to_value_statement
  repair_action:
    description: Represents an action that needs to be taken to repair a problem
    abstract: true
    slots:
    - subject
    - description
    slot_usage:
      subject:
        description: The thing that is problematic
  problem:
    description: Represents an instance of a problem pertaining to conformance to
      OBO guidelines
    abstract: true
    slots:
    - subject
    - predicate
    - value
    slot_usage:
      subject:
        description: The thing that is problematic
      predicate:
        description: The property of the thing that is problematic
  lexical_problem:
    description: a problem with the textual value of an annotation property
    is_a: problem
    abstract: true
  trailing_whitespace_problem:
    comments:
    - "sqlview>> SELECT\n  subject,\n  predicate,\n  value\nFROM statements WHERE\
      \ VALUE like ' %' OR VALUE like '% '"
    is_a: problem
  property_used_with_datatype_values_and_objects:
    description: A problem in which the same property is used two two different ways,
      one in which the range is a literal value, the other where it is an object.
    comments:
    - in OWL, if a property is typed as object or datatype, this will constrain its
      use. However, annotation properties have no such constraints in OWL, but we
      still consider this problematic and unintentional, unless it is a truly generic
      predicate, such as owl:annotatedTarget or rdf:object
    - "sqlview>>\n  SELECT\n    DISTINCT\n      s1.predicate AS subject,\n      s1.predicate,\n\
      \      s1.datatype AS value\n  FROM statements AS s1, statements AS s2 ON (s1.predicate=s2.predicate)\n\
      \  WHERE s1.value IS NOT NULL and s2.object IS NOT NULL"
    see_also:
    - https://github.com/information-artifact-ontology/ontology-metadata/issues/67
    is_a: problem
  node_with_two_labels_problem:
    comments:
    - "sqlview>>\n  SELECT\n     s1.subject,\n     s1.predicate,\n     s1.value\n\
      \  FROM rdfs_label_statement AS s1, rdfs_label_statement AS s2\n  WHERE s1.subject=s2.subject\
      \ AND s1.value != s2.value"
    is_a: problem
    attributes:
      label1: {}
      label2: {}
  all_problems:
    comments:
    - sqlview>> SELECT * FROM node_with_two_labels_problem
    - sqlview>> SELECT * FROM trailing_whitespace_problem
    is_a: problem
source_file: ../semantic-sql/src/linkml/obo.yaml
