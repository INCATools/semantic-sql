name: relation_graph
description: "Module for representing Relation Graphs.\n\nThe core concept in a relation\
  \ graph is an [Edge](Edge.md), which consists of\n\n * [subject](subject.md)\n *\
  \ [predicate](predicate.md)\n * [object](object.md)\n\nWhen mapping from OWL, an\
  \ Edge corresponds to one of:\n\n * `A SubClassOf B`, where `B` is a named class,\
  \ and the predicate is rdfs:subClassOf\n * `A SubClassOf P some B`, and the predicate\
  \ is `P`"
title: Relation Graph module
id: https://w3id.org/semsql/relation_graph
imports:
- rdf
- owl
license: https://creativecommons.org/publicdomain/zero/1.0/
prefixes:
  semsql_rg: https://w3id.org/semsql/relation_graph
  linkml: https://w3id.org/linkml/
default_curi_maps:
- semweb_context
default_prefix: semsql_rg
default_range: string
slots:
  anchor_object:
    range: node
  anchor_predicate: {}
  secondary_predicate:
    range: node
classes:
  relation_graph_construct:
    description: A construct used as part of a Relation Graph
    todos:
    - consider moving this to its own module
    comments:
    - Relation Graphs are complementary abstractions to OWL in which axioms of the
      form A SubClassOf R some C form individual edges
    abstract: true
    slots:
      - subject
      - predicate
      - object
  edge:
    description: A relation graph edge that connects two entities by a predicate.
      Note an edge is distinct from a statement, in that an axiom such as A SubClassOf
      R some B is represented as multiple statements, but is a single relation graph
      edge
    notes:
    - this should hold direct edges. See also entailed_edge
    comments:
    - |-
      sqlview>>
        SELECT subject, predicate, object
        FROM owl_subclass_of_some_values_from
         UNION
        SELECT subject, predicate, object
        FROM rdfs_subclass_of_named_statement
         UNION
        SELECT subject, predicate, object
        FROM rdf_type_statement WHERE object IN (SELECT id FROM class_node)
    in_subset:
    - base table
    is_a: relation_graph_construct
    slots:
    - subject
    - predicate
    - object
  subgraph_query:
    description: A subgraph query encompasses as subgraph edge and a seed/anchor object
      and seed/anchor predicate
    is_a: relation_graph_construct
    abstract: true
    slots:
    - subject
    - predicate
    - object
    - anchor_object
    - anchor_predicate
    slot_usage:
      subject:
        description: subject of the subgraph edge
      predicate:
        description: predicate of the subgraph edge
      object:
        description: object of the subgraph edge
      anchor_object:
        description: The entity that is used to seed the graph. The seed entity will
          bear some relationship to each subgraph edge; E.g. with an ancestor subgraph
          query, all edges will have a subject that descends from the ancestor
      anchor_predicate:
        description: The predicate that is used to determine if an edge should be
          included based on relationship to the anchor_object.
  subgraph_edge_by_ancestor:
    description: An edge within a subgraph anchored around a set of ancestor terms
    comments:
    - '{''Example'': ''subgraph under uberon limb "SELECT * FROM sg_edge WHERE anchor_object=\''UBERON:0002101\'';"''}'
    - '{''Example'': ''subgraph from part-descendants of uberon limb "SELECT * FROM
      sg_edge WHERE anchor_object=\''UBERON:0002101\'' AND ancestor_predicate=\''BFO:0000050\'';"''}'
    - "sqlview>>\n  SELECT\n    edge.*,\n    ee.predicate AS anchor_predicate,\n \
      \   ee.object AS anchor_object\n  FROM edge JOIN entailed_edge AS ee ON (edge.subject\
      \ = ee.subject)"
    is_a: subgraph_query
    slots:
    - subject
    - predicate
    - object
    - anchor_object
    - anchor_predicate
    slot_usage:
      anchor_object:
        description: The ancestor term
      anchor_predicate:
        description: The entailed predicate that holds between each edge subject and
          the ancestor
  subgraph_edge_by_descendant:
    description: An edge within a subgraph anchored around a set of descendant terms
    comments:
    - '{''Example'': ''subgraph under uberon limb "SELECT * FROM sg_edge WHERE anchor_object=\''UBERON:0002101\'';"''}'
    - "sqlview>>\n  SELECT\n    edge.*,\n    ee.predicate AS anchor_predicate,\n \
      \   ee.subject AS anchor_object\n  FROM edge JOIN entailed_edge AS ee ON (edge.subject\
      \ = ee.object)"
    is_a: subgraph_query
    slots:
    - subject
    - predicate
    - object
    - anchor_object
    - anchor_predicate
    slot_usage:
      anchor_object:
        description: The descendant term
      anchor_predicate:
        description: The entailed predicate that holds between the descendant and
          each edge subject
  subgraph_edge_by_ancestor_or_descendant:
    comments:
    - sqlview>> SELECT * FROM subgraph_edge_by_ancestor
    - sqlview>> SELECT * FROM subgraph_edge_by_descendant
    is_a: subgraph_query
  subgraph_edge_by_parent:
    description: An edge within a subgraph anchored around a set of parent terms
    comments:
    - "sqlview>>\n  SELECT\n    edge.*,\n    ee.predicate AS anchor_predicate,\n \
      \   ee.object AS anchor_object\n  FROM edge JOIN edge AS ee ON (edge.subject\
      \ = ee.subject)"
    is_a: subgraph_query
    slots:
    - subject
    - predicate
    - object
    - anchor_object
    - anchor_predicate
    slot_usage:
      anchor_object:
        description: The parent term
      anchor_predicate:
        description: The entailed predicate that holds between each edge subject and
          the parent
  subgraph_edge_by_child:
    description: An edge within a subgraph anchored around a set of child terms
    comments:
    - "sqlview>>\n  SELECT\n    edge.*,\n    ee.predicate AS anchor_predicate,\n \
      \   ee.subject AS anchor_object\n  FROM edge JOIN edge AS ee ON (edge.subject\
      \ = ee.object)"
    is_a: subgraph_query
    slots:
    - subject
    - predicate
    - object
    - anchor_object
    - anchor_predicate
    slot_usage:
      anchor_object:
        description: The child term
      anchor_predicate:
        description: The entailed predicate that holds between the child and each
          edge subject
  subgraph_edge_by_self:
    description: A special null form of a subgraph query where there is no expansion
    comments:
    - "sqlview>>\n  SELECT\n    edge.*,\n    edge.predicate AS anchor_predicate,\n\
      \    edge.subject AS anchor_object\n  FROM edge"
    is_a: subgraph_query
    slots:
    - subject
    - predicate
    - object
    - anchor_object
    - anchor_predicate
  entailed_edge:
    description: A relation graph edge that is inferred
    comments:
    - '- It is common to populate this via a procedure external to the database, e.g
      balhoff/relation-graph'
    in_subset:
    - base table
    see_also:
    - https://github.com/balhoff/relation-graph
    is_a: relation_graph_construct
    slots:
    - subject
    - predicate
    - object
  entailed_edge_cycle:
    description: An edge that composes with another edge to make a cycle
    comments:
    - |-
      sqlview>>
      SELECT e.*, e2.predicate AS secondary_predicate
      FROM entailed_edge AS e,
      entailed_edge AS e2
      WHERE e.object = e2.subject AND e2.object=e.subject
    is_a: relation_graph_construct
    slots:
    - subject
    - predicate
    - object
    - secondary_predicate
  entailed_edge_same_predicate_cycle:
    description: An entailed_edge_cycle over a single predicate
    comments:
    - "sqlview>>\n  SELECT * FROM entailed_edge_cycle WHERE predicate = secondary_predicate"
    is_a: entailed_edge_cycle
  transitive_edge:
    description: A relation graph edge that is formed from a chain of one or more
      edges
    notes:
    - this is equivalent to a property path query in SPARQL
    - there may be fewer edges than entailed_edge
    comments:
    - "sqlview>>\n  WITH RECURSIVE transitive_edge\n               (\n           \
      \          subject, predicate, object, depth\n               )\n           \
      \    AS\n               (SELECT subject, predicate, object, 1\n            \
      \      FROM edge\n                 UNION ALL\n                SELECT\n     \
      \                e.subject, e.predicate, a.object, a.depth+1\n             \
      \     FROM edge AS e\n                  JOIN transitive_edge AS a\n        \
      \            ON e.object = a.subject AND e.predicate = a.predicate\n       \
      \        )\n            SELECT * FROM transitive_edge"
    is_a: relation_graph_construct
    slots:
    - subject
    - predicate
    - object
